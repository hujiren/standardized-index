package com.sutpc.its.tools.gps;

import com.alibaba.fastjson.JSON;
import com.alibaba.fastjson.JSONArray;
import com.alibaba.fastjson.JSONObject;
import com.alibaba.fastjson.TypeReference;
import com.mashape.unirest.http.Unirest;
import com.mashape.unirest.http.exceptions.UnirestException;
import com.sutpc.its.config.DataConfig;
import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Scanner;
import lombok.extern.slf4j.Slf4j;
import org.springframework.core.io.Resource;

/**
 * .
 */
@Slf4j
public class GpsUtils {

  //  public static List<Map> getSZboundary() {
  //
  //    Double[][] szBoundary = new Double[][]{{113.88612800000003, 22.862783999999966},
  //        {113.89736600000003, 22.847663000000026}, {113.897606, 22.83883199999996},
  //        {113.90613400000004, 22.83296999999997}, {113.93209799999998, 22.835563000000022},
  //        {113.95074000000002, 22.822702000000024}, {113.95007000000001, 22.818020999999963},
  //        {113.96733900000004, 22.815440000000017}, {113.97293700000003, 22.80196999999999},
  //        {113.98595399999996, 22.803007999999988}, {113.98757699999996, 22.790489000000044},
  //        {113.99797799999999, 22.766178}, {114.012634, 22.762776999999975},
  //        {114.04081699999996, 22.770927999999998}, {114.04359800000003, 22.75959800000002},
  //        {114.05727400000005, 22.75703900000003}, {114.06697599999997, 22.74790199999996},
  //        {114.07924999999997, 22.753200999999997}, {114.09365400000002, 22.749424000000037},
  //        {114.09555000000003, 22.737864000000037}, {114.10202500000003, 22.725784999999995},
  //        {114.13138800000002, 22.714926999999992}, {114.13886599999995, 22.704544000000034},
  //        {114.14890900000002, 22.70114799999998}, {114.15107300000001, 22.69046799999996},
  //        {114.16305199999995, 22.676720000000024}, {114.14933899999998, 22.668634999999956},
  //        {114.15593900000002, 22.660429}, {114.168979, 22.656602999999983},
  //        {114.17965600000004, 22.659349999999986}, {114.18140800000005, 22.67719799999996},
  //        {114.19039199999997, 22.682706999999965}, {114.18679100000001, 22.69169399999997},
  //        {114.19446100000003, 22.697478999999984}, {114.19150299999997, 22.713922999999966},
  //        {114.20299300000005, 22.718988000000003}, {114.203614, 22.731921000000007},
  //        {114.21082800000003, 22.73832799999997}, {114.20480499999995, 22.753999000000032},
  //        {114.19985099999995, 22.755436000000003}, {114.19550999999996, 22.768399000000002},
  //        {114.18347000000003, 22.766251}, {114.18194000000001, 22.774298000000034},
  //        {114.174342, 22.781637000000018}, {114.20571300000003, 22.795579000000018},
  //        {114.210557, 22.81016200000003}, {114.22434400000004, 22.81531900000004},
  //        {114.22941900000002, 22.800868000000026}, {114.24083000000005, 22.793070999999983},
  //        {114.24579299999999, 22.784339000000028}, {114.256577, 22.784531000000015},
  //        {114.28193399999999, 22.80991500000002}, {114.300622, 22.80431800000002},
  //        {114.31414499999998, 22.80949799999998}, {114.32206599999998, 22.807630999999958},
  //        {114.336458, 22.812478999999982}, {114.34528100000003, 22.809014999999984},
  //        {114.34634900000002, 22.79245599999999}, {114.33775700000001, 22.78706000000001},
  //        {114.341368, 22.78057499999999}, {114.35147199999997, 22.777576000000007},
  //        {114.35103099999998, 22.767650000000025}, {114.36218800000003, 22.76888299999999},
  //        {114.38251700000004, 22.760171999999997}, {114.39017200000005, 22.762769000000024},
  //        {114.39130100000003, 22.77772999999996}, {114.39907300000004, 22.783934000000002},
  //        {114.406006, 22.78078399999996}, {114.41320700000003, 22.769378999999997},
  //        {114.41551500000004, 22.756530000000016}, {114.40984800000001, 22.75489899999998},
  //        {114.40888899999999, 22.738886000000043}, {114.40258600000001, 22.733797999999968},
  //        {114.40370500000004, 22.713852000000042}, {114.415596, 22.71653999999996},
  //        {114.42220499999996, 22.701776999999975}, {114.437676, 22.69782200000003},
  //        {114.43607900000002, 22.68474400000002}, {114.42290900000005, 22.67909799999996},
  //        {114.42683899999996, 22.66338900000004}, {114.44502300000002, 22.66755900000001},
  //        {114.45239899999996, 22.671963999999974}, {114.47344500000004, 22.664126999999997},
  //        {114.47727500000003, 22.670731000000007}, {114.50151499999998, 22.67070100000001},
  //        {114.50786100000005, 22.665154999999967}, {114.49909700000002, 22.657150000000033},
  //        {114.50131900000001, 22.648228999999983}, {114.524382, 22.655971000000005},
  //        {114.53330399999996, 22.652765000000038}, {114.55198999999999, 22.65144799999996},
  //        {114.57071599999996, 22.654034999999958}, {114.58233099999998, 22.66084299999997},
  //        {114.595964, 22.65424899999999}, {114.58910600000002, 22.64037999999999},
  //        {114.58356700000002, 22.63879199999996}, {114.57900400000004, 22.618544000000004},
  //        {114.55345900000003, 22.605617999999957}, {114.547327, 22.59373900000003},
  //        {114.53534999999997, 22.589840000000013}, {114.50703300000002, 22.590514999999996},
  //        {114.49986, 22.579751000000044}, {114.50173299999999, 22.56864500000004},
  //        {114.49891499999997, 22.55713699999999}, {114.51828100000004, 22.554574000000024},
  //        {114.52578300000002, 22.560978000000006}, {114.52430600000002, 22.567760999999994},
  //        {114.54688300000004, 22.570964999999973}, {114.54980500000003, 22.56339199999999},
  //        {114.56811600000005, 22.549491000000007}, {114.58886399999999, 22.543322000000018},
  //        {114.60601300000003, 22.544734999999957}, {114.60383800000001, 22.532261000000005},
  //        {114.61440300000002, 22.525727000000014}, {114.62297199999999, 22.515440000000005},
  //        {114.621787, 22.50924100000002}, {114.60833299999996, 22.496815000000044},
  //        {114.59418199999999, 22.496444999999984}, {114.58215699999998, 22.486961999999973},
  //        {114.55216000000003, 22.47844099999998}, {114.54533400000004, 22.48385300000004},
  //        {114.52659499999997, 22.470726999999965}, {114.528665, 22.46303599999999},
  //        {114.519312, 22.45393099999999}, {114.509286, 22.450255000000038},
  //        {114.49466399999996, 22.455157999999994}, {114.49569200000002, 22.465343},
  //        {114.48145700000002, 22.470932999999956}, {114.48440299999997, 22.481641999999976},
  //        {114.478391, 22.493097999999986}, {114.47591500000004, 22.51471800000004},
  //        {114.48506900000001, 22.52399199999999}, {114.48258899999998, 22.538634},
  //        {114.476143, 22.548381000000003}, {114.468732, 22.548715000000016},
  //        {114.46119900000004, 22.55848499999997}, {114.45874900000001, 22.56945200000002},
  //        {114.438626, 22.56980100000003}, {114.43603900000001, 22.583722999999974},
  //        {114.42625900000002, 22.60133700000004}, {114.41296999999996, 22.60447599999997},
  //        {114.41139600000002, 22.609328999999963}, {114.38822599999997, 22.613999000000003},
  //        {114.37502300000001, 22.610943000000013}, {114.33941599999996, 22.59720600000001},
  //        {114.32712900000003, 22.605046999999963}, {114.31889199999999, 22.596478999999988},
  //        {114.31296600000005, 22.60117800000003}, {114.29989699999997, 22.589283000000023},
  //        {114.30256899999999, 22.578249000000024}, {114.27839899999998, 22.581904000000016},
  //        {114.28431999999997, 22.570161999999968}, {114.27525000000001, 22.565798000000022},
  //        {114.26608700000001, 22.57563200000003}, {114.24390300000002, 22.55710799999999},
  //        {114.23536400000005, 22.55354499999997}, {114.22959100000004, 22.544918999999993},
  //        {114.218388, 22.554826000000002}, {114.17765099999995, 22.555805000000003},
  //        {114.17576199999998, 22.560087000000003}, {114.15966600000002, 22.560624000000026},
  //        {114.15192999999996, 22.554441000000033}, {114.14746400000001, 22.54133600000001},
  //        {114.137047, 22.543189000000027}, {114.12264399999995, 22.538164000000013},
  //        {114.11172800000004, 22.529604999999982}, {114.103127, 22.53562499999999},
  //        {114.09019799999997, 22.537279999999967}, {114.07916499999996, 22.531020999999992},
  //        {114.07312200000001, 22.51924399999998}, {114.05857099999997, 22.51250200000001},
  //        {114.05088800000004, 22.502273000000002}, {114.031954, 22.50816799999997},
  //        {114.00122900000004, 22.52375799999999}, {113.97632099999998, 22.517402999999977},
  //        {113.95131000000002, 22.515659000000007}, {113.94755400000003, 22.50356099999999},
  //        {113.94842299999998, 22.490578000000024}, {113.93139200000002, 22.479804000000044},
  //        {113.91331400000001, 22.482708999999975}, {113.90176800000002, 22.47271700000004},
  //        {113.89599899999999, 22.457743000000004}, {113.885302, 22.45542},
  //        {113.87834899999997, 22.461123999999973}, {113.86128400000003, 22.499324999999978},
  //        {113.86452800000004, 22.50278999999997}, {113.86146999999997, 22.51802899999999},
  //        {113.87461100000004, 22.520749999999975}, {113.881675, 22.526299},
  //        {113.88574700000004, 22.542735000000032}, {113.87661099999997, 22.54655799999998},
  //        {113.868392, 22.52910699999999}, {113.85784599999997, 22.52484600000004},
  //        {113.84830800000002, 22.555686000000016}, {113.83194699999999, 22.581628000000006},
  //        {113.804147, 22.607141000000027}, {113.79105699999998, 22.62426199999998},
  //        {113.77055299999998, 22.66247000000003}, {113.77526700000001, 22.66699599999997},
  //        {113.75857400000004, 22.68949999999998}, {113.75219000000003, 22.723838000000015},
  //        {113.75762600000003, 22.73971499999998}, {113.78868100000003, 22.75993300000003},
  //        {113.78718700000005, 22.771790999999993}, {113.80602299999997, 22.785264999999995},
  //        {113.81037599999998, 22.79496999999999}, {113.81996299999999, 22.79574599999998},
  //        {113.83235699999997, 22.80381299999998}, {113.835291, 22.811219},
  //        {113.831635, 22.82935200000002}, {113.84644799999995, 22.840372000000016},
  //        {113.85207099999998, 22.835537000000002}, {113.86790600000002, 22.84033900000004},
  //        {113.87353799999998, 22.855363000000036}, {113.88612800000003, 22.862783999999966}};
  //
  //    List<Map> szBoundaryList = new ArrayList<Map>();
  //
  //    for (int i = 0; i < szBoundary.length; i++) {
  //      Map<String, Object> tempMap = new HashMap<String, Object>();
  //      tempMap.put("lng", szBoundary[i][0]);
  //      tempMap.put("lat", szBoundary[i][1]);
  //
  //      szBoundaryList.add(tempMap);
  //    }
  //    return szBoundaryList;
  //  }

  public static boolean isExistsArea(double lng, double lat, String info) {
    int k = 0;
    try {
      /*获取边界信息*/
      JSONObject jsonObject = JSONObject.parseObject(info);
      JSONArray features = jsonObject.getJSONArray("features");
      for (int i = 0; i < features.size(); i++) {
        JSONObject feature = features.getJSONObject(i);
        JSONObject geometry = feature.getJSONObject("geometry");
        JSONArray coordinates = (JSONArray) ((JSONArray) geometry.getJSONArray("coordinates")
            .get(0)).get(0);
        List<Map> points = new ArrayList<Map>();
        for (int j = 0; j < coordinates.size(); j++) {
          Map<String, Object> pointMap = new HashMap<String, Object>();
          JSONArray point = coordinates.getJSONArray(j);
          pointMap.put("lng", Double.valueOf(point.getString(0)));
          pointMap.put("lat", Double.valueOf(point.getString(1)));
          points.add(pointMap);
        }
        if (isExistsArea(lng, lat, points)) {
          return true;
        }
      }
    } catch (NumberFormatException e) {
      e.printStackTrace();
    }
    return false;
  }

  /**
   * 是否存在此区域的数据.
   */
  public static boolean isExistsArea(double lng, double lat, List<Map> edgePslist) {
    //List<Map> edgePslist = getSZboundary();
    if (edgePslist == null) {
      return false;
    }
    if (isPInPoly(edgePslist, lng, lat)) {
      return true;
    }
    return false;
  }

  /**
   * .
   */
  public static boolean isPInPoly(List<Map> list, double testx, double testy) {
    int nvert = list.size();
    int i;
    int j;
    boolean c = false;
    for (i = 0, j = nvert - 1; i < nvert; j = i++) {
      Double minLat = Double.parseDouble(list.get(i).get("lat").toString());
      Double maxLat = Double.parseDouble(list.get(j).get("lat").toString());
      Double minlng = Double.parseDouble(list.get(i).get("lng").toString());
      Double maxlng = Double.parseDouble(list.get(j).get("lng").toString());
      if (((minLat > testy) != (maxLat > testy)) && (testx
          < (maxlng - minlng) * (testy - minLat) / (maxLat - minLat) + minlng)) {
        c = !c;
      }

    }
    return c;
  }

  /**
   * .
   */
  public static List<Map<String, Double>> getAreaList(String url, double longitude, double latitude,
      DataConfig config, int id, String topic, List<Map> points) {
    String netStr = null;
    List<Map<String, Double>> result = new ArrayList<>();
    try {
      netStr = Unirest.post(url)
          .field("topic", topic)
          .field("longitude", longitude)
          .field("latitude", latitude)
          .field("distance", 5000)
          .asString().getBody();
      Map<String, String> resultNet = (Map<String, String>) JSON.parse(netStr);
      for (String s : resultNet.keySet()) {
        String value = resultNet.get(s);
        String[] array = value.split(",");
        double llng = Double.parseDouble(array[4]);
        double llat = Double.parseDouble(array[5]);
        Map<String, Double> m = GpsConvertUtils.wgs2Gcj(llng, llat);
        boolean flag = GpsUtils.isExistsArea(m.get("lon"), m.get("lat"), points);
        if (flag) {
          Map<String, Double> mapResult = new HashMap<>();
          mapResult.put("lng", m.get("lon"));
          mapResult.put("lat", m.get("lat"));
          result.add(mapResult);
        }
      }
    } catch (UnirestException e) {
      e.printStackTrace();
    }
    return result;
  }

  public static List<Map> jsonFileReaderToList(Resource resource) {
    try {
      File file = resource.getFile();
      String jsonData = jsonFileReader(file);
      return JSON.parseObject(jsonData, new TypeReference<ArrayList<Map>>() {
      });
    } catch (Exception e) {
      e.printStackTrace();
    }
    return null;
  }


  public static JSONObject jsonFileReader(Resource resource) {
    try {
      File file = resource.getFile();
      String jsonData = jsonFileReader(file);
      JSONObject jsonObject = JSONObject.parseObject(jsonData);
      return jsonObject;
    } catch (IOException e) {
      e.printStackTrace();
      log.error(e.getMessage());
    }
    return new JSONObject();
  }

  private static String jsonFileReader(File file) {
    Scanner scanner = null;
    StringBuilder buffer = new StringBuilder();
    try {
      scanner = new Scanner(file, "utf-8");
      while (scanner.hasNextLine()) {
        buffer.append(scanner.nextLine());
      }
    } catch (Exception e) {
      e.printStackTrace();
    } finally {
      if (scanner != null) {
        scanner.close();
      }
    }
    return buffer.toString();
  }
}
